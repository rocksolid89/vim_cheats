#####VIM chapter3#####

быстрое перемещение по тексту (т.к. большую часть времени приходится редактировать уже существующий текст )

виды перемещения в этой главе
-по экранам
-по текстовым блокам
-поиск по шаблону
-поиск по номеру строки 

перемещение по экранам редактора

@перемещение в командном режиме

CTRL-F - перемещение на 1 экран вниз 
CTRL-B - перемещение на 1 экран вверх
CTRL-D - перемещение на половину экрана вниз
CTRL-U - пермещение на половину экрана вверх

перемещение строки, на которой в данный момент находится курсор, в центр середину и конец экрана

zENTER 	- переместить строку в самый верх экрана
z. 	- переместить строку в середину экрана
z- 	-  переместить строку в конец экрана

CTRL-E - пролистывает экран на одну строку вниз
CTRL-Y - пролистывает экран на одну строку вверх 

CTRL - L - используется для перерисовки экрана

перемещение в пределах текущего экрана

H - перемещение на верх текущего экрана
M - перемещение в середину текущего экрана
L - перемещение вниз текущего экрана

допускается использование числовых модификаторов для этих команд (пример: nH - на n строк ниже первой строки экрана строки ; nL-на n строк выше последней строки)

продолжаем редактирование данного файла, т.к. глава еще далеко не закончена :)



осуществляется с помощью следующих команд

^ - переход на первый непустой символ в строке ( по большей части очень похоже на 0, отличие лишь в том,что 0 переводит на первый символ строки, даже если она пустая )
n| - переход на n-ый столбец в строке

перемещение по текстовым блокам:

в предыдyщих параграфах мы уже рассмотрели как перемещаться по текстовым блокам с помощью команд: w,W,b,B

сейчас же рассмотрим то, как можно предвигаться по предложениям, абзацам и т.д.

vim/vi - конец предложения .!? + между ними 2 пробела или предложение является последним в сторке


e - переходит в конец текущего слова
E - переходит в конец слова без учета пунктуации
( - переходит в начало текущего предложения
) - переходит в начало следующего предложения
{ - ... в начало текущего абзаца


} - ... в начало следущего абзаца  
[[- ... в начало текущего раздела
]]- ... в начало следующегo раздела

*****ПОИСК*****

#перемещение по рещультатам поиска в vim

you can search with using next command: 

/(pattern_to_match) - поиск в прямом направлении
?(pattern_to_match) - поисе в обратном направлении

Повторный поиск по файлу
n - повторить поиск в том же напрвлении
N - повторить поиск в противоположном направлнеии
/ enter - поиск "вперед"
? enter - поиск "назад"

поисковый шаблон сохраняется на всем протяжении редактирования документа

! опция для управления цикличностью поиска задается с помощью команды set nowrapscan(wrapscan) - turn off/and turn on accordingly

редактирование во время поиска:

например мы имеем возможность использовать операции изменения текста такие как:c and d в сочетании с поиском в разных направлениях

d/pattern_to_match - удалит текст с текущего положения курсора до  первoго совпадения с паттерном поиска
d?pattern_to_match - тоже самое, только поиск будет производиться в обратном направлении

****************************** продолжаем изучать редактирование

поиск в текущей строке

список команд:

fx - найти следующее вхождение х в строке
Fx - найти предыдущее вхождение х в строке
tx - найти символ перед следущим вхождением х в строке и переместить на него курсор
Tx - найти символ перед предыдущим вхождением х в строке и переместить на него курсор
; - повторить поиск в том же направлении
, - повторить поиск в обратном направлении

# допускается использование числовых модификаторов - например: 2fx - перейдет на второе вхождение символа х в строке
можно использовать совместно с командами удаления и копирования: например dfx - удалит все символы в строке до символа х включительно

ПЕРЕХОД К СТРОКУ ПО ЕЁ НОМЕРУ

Каждая строка в файле имеет свой номер, что позволяет быстро перемещаться по документу. Включить отображение номеров строк в редактируемых файлах можно с помощью команды set nu

команда CTRL-G - показывается инфорацию о текущем положении курсора в редактируемом документе (! вывод этой команды может существенно отличаться в разных поставках редактора ) 

КОМАНДА Go To (G)
собственно то, что мы уже знаем.
команда G10 - переместит на на 10 строчку в файле
G - переместит нас в конец документа

`` может вернуть на первоначальное полодение курсора, может вернуть не место последнего редактирования или на то место, где был курсор перед поиском текста в файле
'' делает тоже самое, только переход осуществляется на строку, а не конкретный символ в ней



